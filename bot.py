import logging
import csv
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

TOKEN = os.getenv("TOKEN") or "8075247657:AAEOFQGogUIITMVpndzRR_jH-ZM84NRqa4Q"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import hashlib
import csv
import os
from datetime import datetime, timedelta
from asyncio import sleep

GROUP_ID = -1000000000000  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ ID —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã "–û–ø–ª–∞—Ç—ã"
CHANNEL_ID = -1000000000000  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ ID –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—É–±–∞
CSV_FILE = "subscriptions.csv"
ROBOKASSA_MERCHANT_LOGIN = "Neyroph_bot"
ROBOKASSA_PASSWORD_1 = "dR07mRr4HoY8sGQb5Any"

@dp.callback_query_handler(lambda c: c.data == 'agree')
async def agree_handler(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", callback_data="create_characters"),
        InlineKeyboardButton("üîí –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±", callback_data="join_club")
    )
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã –¢–∞–Ω—è –∏ –ö–æ—Å—Ç—è ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç—É–¥–∏–∏ NEYROPH üé•üì∏\n\n"
        "–ú—ã —É–º–µ–µ–º –¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –≤–∏–∑—É–∞–ª —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã —ç—Ç–æ —É–º–µ–ª –∫–∞–∂–¥—ã–π!\n\n"
        "–í—ã–±–∏—Ä–∞–π, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üëá"
    )
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=text,
                                reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'create_characters')
async def create_characters_handler(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", url="https://ai-avatar.ru/learning"),
        InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ", url="https://t.me/ManagerNeyroph"),
        InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    await bot.send_video(callback_query.from_user.id, open("lesson_placeholder.mp4", "rb"))
    await bot.send_message(callback_query.from_user.id,
                           "–≠—Ç–æ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫ ‚Äî —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —Ç—É—Ç –ø—Ä–æ —Ç–æ, –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ.",
                           reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'join_club')
async def join_club_handler(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìÖ 1 –º–µ—Å ‚Äî 990‚ÇΩ", callback_data="pay_1"),
        InlineKeyboardButton("üìÖ 3 –º–µ—Å ‚Äî 2690‚ÇΩ", callback_data="pay_3"),
        InlineKeyboardButton("üìÖ 6 –º–µ—Å ‚Äî 4790‚ÇΩ", callback_data="pay_6"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    text = (
        "NEYROPH ‚Äî —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
        "üéì –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –≥–∞–π–¥—ã, —à–∞–±–ª–æ–Ω—ã, –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏\n"
        "üöÄ –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö: —Å—Ç–∏–ª–∏, LoRA, –≤–∏–¥–µ–æ, GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã\n"
        "üí¨ –ö–æ–º—å—é–Ω–∏—Ç–∏: –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "üì¶ –ü–ª—é—Å: —ç–∫—Å–∫–ª—é–∑–∏–≤, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –º–∏–Ω–∏-–∫—É—Ä—Å—ã\n\n"
        "–û–ø–ª–∞—á–∏–≤–∞—è, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ—Ñ–µ—Ä—Ç—É –∏ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏—è."
    )
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=text,
                                reply_markup=keyboard)
@dp.callback_query_handler(lambda c: c.data == 'disagree')
async def disagree_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–ñ–∞–ª—å üòî –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start.")

# –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    from aiogram import executor

async def on_startup(dispatcher):
    from asyncio import create_task
    create_task(scheduler())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    
@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: types.CallbackQuery):
    await start_handler(callback_query.message)
def generate_payment_url(user_id: int, months: int, amount: int) -> str:
    inv_id = int(datetime.now().timestamp())
    description = f"NEYROPH: {months} –º–µ—Å"
    signature = f"{ROBOKASSA_MERCHANT_LOGIN}:{amount}:{inv_id}:{ROBOKASSA_PASSWORD_1}"
    crc = hashlib.md5(signature.encode()).hexdigest()
    return (
        f"https://auth.robokassa.ru/Merchant/Index.aspx?"
        f"MerchantLogin={ROBOKASSA_MERCHANT_LOGIN}&"
        f"InvId={inv_id}&OutSum={amount}&Description={description}&"
        f"Email={user_id}@tg.com&SignatureValue={crc}&IsTest=1"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def handle_payment(callback_query: types.CallbackQuery):
    plans = {"pay_1": (1, 990), "pay_3": (3, 2690), "pay_6": (6, 4790)}
    months, price = plans[callback_query.data]
    url = generate_payment_url(callback_query.from_user.id, months, price)
    await bot.send_message(callback_query.from_user.id,
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {months} –º–µ—Å ({price}‚ÇΩ).\n\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}")

@dp.message_handler(lambda message: message.text.startswith("/paid"))
async def fake_payment_handler(message: types.Message):
    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /paid [user_id] [–º–µ—Å—è—Ü–µ–≤]")
        return
    user_id = int(args[1])
    months = int(args[2])
    username = (await bot.get_chat(user_id)).username or f"id{user_id}"
    now = datetime.now()
    expiry = now + timedelta(days=30 * months)
    with open(CSV_FILE, "a", newline='') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, username, now.date(), expiry.date(), months])
    await bot.send_message(GROUP_ID,
        f"üí∞ –û–ø–ª–∞—Ç–∞ –æ—Ç @{username}\n–¢–∞—Ä–∏—Ñ: {months} –º–µ—Å\n–°—É–º–º–∞: {990 if months==1 else 2690 if months==3 else 4790}‚ÇΩ")
    await bot.send_message(user_id,
        "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n\n–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ –∫–ª—É–±:\nhttps://t.me/+i-61vFGHsw45ZjRi\n"
        "–ï—Å–ª–∏ –≤–∞—Å –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞ 8—á ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @ManagerNeyroph")

async def check_subscriptions():
    if not os.path.exists(CSV_FILE):
        return
    with open(CSV_FILE, newline='') as f:
        reader = csv.reader(f)
        rows = list(reader)
    updated = []
    for row in rows:
        try:
            user_id = int(row[0])
            expiry = datetime.strptime(row[3], "%Y-%m-%d")
            if expiry < datetime.now():
                await bot.kick_chat_member(CHANNEL_ID, user_id)
            else:
                updated.append(row)
        except: pass
    with open(CSV_FILE, "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerows(updated)

async def scheduler():
    while True:
        await check_subscriptions()
        await sleep(86400)  # 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"),
        InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="disagree")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º...\n\n"
        "‚ö†Ô∏è –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(-–∞) —Å "
        "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://docs.google.com/document/d/1XHFjqbDKYhX5am-Ni2uQOO_FaoQhOcLcq7-UiZyQNlE/edit?usp=drive_link) "
        "–∏ –¥–∞—ë—à—å –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )



