
# bot.py
import logging
import csv
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import CommandStart, Command
import os

# ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = "8075247657:AAEOFQGogUIITMVpndzRR_jH-ZM84NRqa4Q"
print(f"TOKEN: {repr(TOKEN)}")
MERCHANT_LOGIN = "Neyroph_bot"
PASSWORD1 = "dR07mRr4HoY8sGQb5Any"
NOTIFY_CHAT_ID = os.getenv("NOTIFY_CHAT_ID")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CHANNEL_USERNAME = "@your_channel_username"  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# CSV-—Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
SUBS_FILE = "subscriptions.csv"

# --- –ö–ù–û–ü–ö–ò ---
def start_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª—É–±", callback_data="join_club"))
    kb.add(InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–ª—É–±–µ", callback_data="club_details"))
    kb.add(InlineKeyboardButton("–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="legal_info"))
    kb.add(InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="manage_sub"))
    kb.add(InlineKeyboardButton("FAQ", callback_data="faq"))
    return kb

def tariff_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("1 –º–µ—Å ‚Äî 990‚ÇΩ", url=generate_pay_link(990, "1 –º–µ—Å")))
    kb.add(InlineKeyboardButton("3 –º–µ—Å ‚Äî 2690‚ÇΩ", url=generate_pay_link(2690, "3 –º–µ—Å")))
    kb.add(InlineKeyboardButton("6 –º–µ—Å ‚Äî 4790‚ÇΩ", url=generate_pay_link(4790, "6 –º–µ—Å")))
    kb.add(InlineKeyboardButton("–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="legal_info"))
    kb.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã ---
def generate_pay_link(amount, period):
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ NEYROPH –Ω–∞ {period}"
    invoice_id = int(datetime.now().timestamp())
    import hashlib
    signature_raw = f"{MERCHANT_LOGIN}:{amount}:{invoice_id}:{PASSWORD1}"
    signature = hashlib.md5(signature_raw.encode()).hexdigest()
    link = f"https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin={MERCHANT_LOGIN}&OutSum={amount}&InvoiceID={invoice_id}&Description={description}&SignatureValue={signature}"
    return link

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer("–ï—Ö—É—É—É, –ø—Ä–∏–≤–µ—Ç! üëã\n\n–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ ‚Äî –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± NEYROPH...", reply_markup=start_keyboard())

@dp.callback_query_handler(lambda c: c.data == "join_club")
async def join_club(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–∏—Ä–∞–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—Å—Ç—É–ø–∞–π –≤ –∫–ª—É–±!", reply_markup=tariff_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –†–æ–±–æ–∫–∞—Å—Å—ã (webhook) ---
from aiohttp import web

async def robokassa_callback(request):
    data = await request.post()
    user_id = data.get("InvId")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º invoice id –∫–∞–∫ user_id (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
    username = data.get("shp_username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    amount = data.get("OutSum")
    period = data.get("shp_period", "-")

    end_date = (datetime.now() + timedelta(days=30 if period == "1 –º–µ—Å" else 90 if period == "3 –º–µ—Å" else 180)).date()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    with open(SUBS_FILE, "a", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, username, datetime.now().date(), end_date, period])

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(chat_id=NOTIFY_CHAT_ID, text=f"üí≥ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç @{username}\n–¢–∞—Ä–∏—Ñ: {period}\n–°—É–º–º–∞: {amount}‚ÇΩ")

    return web.Response(text="OK")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ---
async def check_subscriptions():
    today = datetime.now().date()
    updated_rows = []
    with open(SUBS_FILE, "r", encoding='utf-8') as f:
        for row in csv.reader(f):
            user_id, username, _, end_date_str, _ = row
            end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
            if today > end_date:
                try:
                    await bot.ban_chat_member(CHANNEL_USERNAME, int(user_id))
                    await bot.unban_chat_member(CHANNEL_USERNAME, int(user_id))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {user_id}: {e}")
            else:
                updated_rows.append(row)
    with open(SUBS_FILE, "w", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerows(updated_rows)

# --- –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
app = web.Application()
app.router.add_post("/payment_callback", robokassa_callback)

if __name__ == "__main__":
    import asyncio
    from aiogram.utils.executor import start_polling

    async def on_startup(_):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    start_polling(dp, skip_updates=True, on_startup=on_startup)
