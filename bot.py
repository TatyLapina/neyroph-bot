import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler, filters, JobQueue)
import datetime
import csv
import os
import hashlib

TOKEN = os.getenv("TOKEN") or "8075247657:AAEOFQGogUIITMVpndzRR_jH-ZM84NRqa4Q"
CHANNEL_LINK = "https://t.me/+i-61vFGHsw45ZjRi"
GROUP_CHAT_ID = "-1002133175953"

SUBSCRIPTION_CSV = "subscriptions.csv"
ROBO_BASE = "https://auth.robokassa.ru/Merchant/Index.aspx"
MERCHANT_LOGIN = "Neyroph_bot"
PASSWORD1 = "dR07mRr4HoY8sGQb5Any"

TARIFFS = {
    "1": ("1 –º–µ—Å—è—Ü", 990, 30),
    "3": ("3 –º–µ—Å—è—Ü–∞", 2690, 90),
    "6": ("6 –º–µ—Å—è—Ü–µ–≤", 4790, 180)
}

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")],
        [InlineKeyboardButton("–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="decline")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º...\n\n"
        "‚ö†Ô∏è –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(-–∞) —Å "
        "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://docs.google.com/document/d/1XHFjqbDKYhX5am-Ni2uQOO_FaoQhOcLcq7-UiZyQNlE/edit?usp=drive_link) "
        "–∏ –¥–∞—ë—à—å –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
        parse_mode='Markdown'
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "agree":
        keyboard = [
            [InlineKeyboardButton("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", callback_data="characters")],
            [InlineKeyboardButton("üîí –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±", callback_data="club")]
        ]
        await query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç –æ—Ç –¢–∞–Ω–∏ –∏ –ö–æ—Å—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥—ã NEYROPH! –ú—ã –¥–µ–ª–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏ —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –∏ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–ª–æ—Å—å!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data == "characters":
        video_path = "video_placeholder.mp4"
        await context.bot.send_video(chat_id=query.from_user.id, video=InputFile(video_path))
        keyboard = [
            [InlineKeyboardButton("üìö –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", url="https://ai-avatar.ru/learning")],
            [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", url="https://t.me/ManagerNeyroph")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="agree")]
        ]
        await context.bot.send_message(query.from_user.id,
            "–≠—Ç–æ –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö. –ó–¥–µ—Å—å —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –≤—Å—è–∫–∏–µ —à—Ç—É–∫–∏ (—Ç—ã –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—à—å —Ç–µ–∫—Å—Ç)",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "club":
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü ‚Äî 990‚ÇΩ", callback_data="pay_1")],
            [InlineKeyboardButton("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ ‚Äî 2690‚ÇΩ", callback_data="pay_3")],
            [InlineKeyboardButton("üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 4790‚ÇΩ", callback_data="pay_6")]
        ]
        await query.edit_message_text(
            "–í—ã–±–∏—Ä–∞–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—Å—Ç—É–ø–∞–π –≤ –Ω–∞—à –∫–ª—É–±!\n\n"
            "–û–ø–ª–∞—á–∏–≤–∞—è —Ç–∞—Ä–∏—Ñ, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.",
            reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("pay_"):
        months = data.split("_")[1]
        title, price, _ = TARIFFS[months]
        invoice_id = int(datetime.datetime.now().timestamp())
        signature = f"{MERCHANT_LOGIN}:{price}:{invoice_id}:{PASSWORD1}"
        signature_md5 = hashlib.md5(signature.encode()).hexdigest()

        link = f"{ROBO_BASE}?MerchantLogin={MERCHANT_LOGIN}&OutSum={price}&InvoiceID={invoice_id}&Description=–ü–æ–¥–ø–∏—Å–∫–∞+–Ω–∞+{title}&SignatureValue={signature_md5}&Recurring=Y"

        await query.message.reply_text(
            f"üîê –¢–∞—Ä–∏—Ñ: {title}\nüí∞ –°—É–º–º–∞: {price}‚ÇΩ\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link)]])
        )

async def payment_success(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    # –∑–∞–≥–ª—É—à–∫–∞: –ø—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ callback
    months = 1
    username = user.username or user.first_name
    start = datetime.datetime.now()
    end = start + datetime.timedelta(days=30 * months)

    with open(SUBSCRIPTION_CSV, "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([user.id, username, start.isoformat(), end.isoformat()])

    await context.bot.send_message(GROUP_CHAT_ID, f"‚úÖ –ü—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç @{username}")
    await context.bot.send_message(user.id,
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {CHANNEL_LINK}\n–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ 8—á). –í–æ–ø—Ä–æ—Å—ã ‚Äî @ManagerNeyroph")

async def check_expired_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    rows = []
    expired = []

    if not os.path.exists(SUBSCRIPTION_CSV):
        return

    with open(SUBSCRIPTION_CSV, newline="") as f:
        reader = csv.reader(f)
        for row in reader:
            user_id, username, _, end_date = row
            if datetime.datetime.fromisoformat(end_date) < now:
                expired.append(int(user_id))
            else:
                rows.append(row)

    for uid in expired:
        try:
            await context.bot.send_message(uid, "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ß—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–ª—É–±–µ ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
        except:
            pass

    with open(SUBSCRIPTION_CSV, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerows(rows)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CallbackQueryHandler(payment_success, pattern="^confirm_payment$"))
    job_queue: JobQueue = app.job_queue
    job_queue.run_repeating(check_expired_subscriptions, interval=86400, first=60)
    app.run_polling()
